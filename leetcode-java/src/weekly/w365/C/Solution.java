package weekly.w365.C;

/**
 * 2875. Minimum Size Subarray in Infinite Array
 *
 * https://leetcode.cn/contest/weekly-contest-365/problems/minimum-size-subarray-in-infinite-array/
 *
 * You are given a 0-indexed array nums and an integer target.
 *
 * A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.
 *
 * Return the length of the shortest subarray of the array infinite_nums with a sum equal to target.
 * If there is no such subarray return -1.
 */

public class Solution {

    public int minSizeSubarray(int[] nums, int target) {
        int sum = 0, n = nums.length;
        for (var v : nums) sum += v;
        int div = target / sum; target %= sum;

        int curr = 0, ans = Integer.MAX_VALUE;
        for (int l = 0, r = 0; r < 2 * n; r++) {
            curr += nums[r % n];
            while (curr > target) curr -= nums[l++ % n];
            if (curr == target) ans = Math.min(ans, r - l + 1);
        }
        return ans == Integer.MAX_VALUE ? -1 : (div * n + ans);
    }

    public static void main(String[] args) {
    }

}
